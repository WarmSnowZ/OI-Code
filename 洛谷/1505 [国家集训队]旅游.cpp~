#include <bits/stdc++.h>
#define ll long long
using namespace std;

int read() {
    int x = 0; bool m = 0; char c = getchar();
    while (!isdigit(c) && c != '-') c = getchar();
    if (c == '-') m = 1, c = getchar();
    while (isdigit(c)) x = x * 10 + c - '0', c = getchar();
    if (m) return -x; else return x;
}
char readc() {
	char c = getchar();
	while (!('A' <= c && c <= 'Z')) c = getchar();
	return c;
}

const int maxn = 100010;
int n, m, u, v, w, a[maxn];
int tot, hed[maxn], to[maxn << 1], nxt[maxn << 1], val[maxn << 1];

void add_edge(int u, int v, int w) {
	nxt[tot] = hed[u], to[tot] = v, val[tot] = w, hed[u] = tot++;
}

struct node {
	int l, r, mid;
	int max, min, sum;
	int lazy;
}

void pushup(int u) {
	p[u].lazy *= w;
	int tmp = p[u].max;
	p[u].max = -p[u].min;
	p[u].min = -tmp;
	p[u].sum = -p[u].sum;
}

void pushdown(int u) {
	if (p[u].lazy == -1) {
		if (p[u].l != p[u].r) {
			pushup(u << 1);
			pushup(u << 1 | 1);
		}
		p[u].lazy = 1;
	}
}

void build(int u, int l, int r) {
	p[u].l = l, p[u].r = r, p[u].mid = (l + r) >> 1, p[u].lazy = 1;
	if (l == r) { p[u].max = p[u].min = p[u].sum = wt[l]; return; }
	build(u << 1, l, p[u].mid);
	build(u << 1 | 1, p[u].mid + 1, r);
	p[u].max = max(p[u << 1].max, p[u << 1 | 1].max);
	p[u].min = min(p[u << 1].min, p[u << 1 | 1].min);
	p[u].sum = p[u << 1].sum + p[u << 1 | 1].sum;
}

void update_num(int u, int k, int w) {
	pushdown(u);
	if (p[u].l == p[u].r) { p[u].sum = p[u].max = p[u].min = k; }
	if (k <= p[u].mid) update(u << 1, k, w);
	else update(u << 1 | 1, k, w);
	p[u].max = max(p[u << 1].max, p[u << 1 | 1].max);
	p[u].min = min(p[u << 1].min, p[u << 1 | 1].min);
	p[u].sum = p[u << 1].sum + p[u << 1 | 1].sum;
}

void update(int u, int l, int r) {
	pushdown(u);
	if (p[u].l == l && p[u].r == r) { pushup(u); return; }
	if (r <= p[u].mid) update(u << 1, l, r);
	else if (l > p[u].mid) update(u << 1 | 1, l, r);
	else update(u << 1, l, p[u].mid), update(u << 1 | 1, p[u].mid + 1, r);
	p[u].max = max(p[u << 1].max, p[u << 1 | 1].max);
	p[u].min = min(p[u << 1].min, p[u << 1 | 1].min);
	p[u].sum = p[u << 1].sum + p[u << 1 | 1].sum;
}

int query_sum(int u, int l, int r) {
	pushdown(u);
	if (p[u].l == l && p[u].r == r) return q[u].sum;
	if (r <= p[u].mid) return query_sum(u << 1, l, r);
	else if (l > p[u].mid) return query_sum(u << 1 | 1, l, r);
	else return query_sum(u << 1, l, p[u].mid) + query_sum(u << 1 | 1, p[u].mid + 1, r);
}

int query_max(int u, int l, int r) {
	pushdown(u);
	if (p[u].l == l && p[u].r == r) return q[u].sum;
	if (r <= p[u].mid) return query_max(u << 1, l, r);
	else if (l > p[u].mid) return query_max(u << 1 | 1, l, r);
	else return max(query_max(u << 1, l, p[u].mid) + query_max(u << 1 | 1, p[u].mid + 1, r));
}

int query_min(int u, int l, int r) {
	pushdown(u);
	if (p[u].l == l && p[u].r == r) return q[u].sum;
	if (r <= p[u].mid) return query_min(u << 1, l, r);
	else if (l > p[u].mid) return query_min(u << 1 | 1, l, r);
	else return min(query_min(u << 1, l, p[u].mid) + query_min(u << 1 | 1, p[u].mid + 1, r));
}

int main() {
	n = read();
	for (int i = 1; i < n; i++) {
		u = read(), v = read(), w = read();
		add_edge(u, v, w);
		add_edge(v, u, w);
	}
	m = read();
	for (int i = 1; i <= n; i++) {
		opt = readc();
		if (opt == 'C') {
			x = read(), z = read();
			update_num(1, id[x], z);
		} else if (opt == 'N') {
			x = read(), y = read();
			while (top[x] != top[y]) {
				if (dep[top[x]] > dep[top[y]]) swap(x, y);
				update(1, id[top[y]], id[y]);
				y = fa[top[y]];
			}
			if (dep[x] > dep[y]) swap(x, y);
			update(1, id[x], id[y]);
		} else if (opt == 'S') {
			x = read(), y = read();
			int ans = 0;
			while (top[x] != top[y]) {
				if (dep[top[x]] > dep[top[y]]) swap(x, y);
				ans += query_sum(1, id[top[y]], id[y]);
				y = fa[top[y]];
			}
			if (dep[x] > dep[y]) swap(x, y);
			ans += query_sum(1, id[x], id[y]);
			printf("%d\n", ans);
		} else {
			opt = readc();
			if (opt == 'A') {
				
			} else {

			}
		}
	}
	return 0;
}

